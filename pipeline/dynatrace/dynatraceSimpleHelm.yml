resources:
  - name: helmGitHub
    type: GitRepo
    configuration:
      gitProvider: DT_PIPELINE
      # replace with your pipelines repository
      path: JFrogDynatrace/pipelines-demo # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: main
      buildOn:
        commit: true

  - name: dockerImage # change
    type: Image
    configuration:
      registry: Dockerregistry
      sourceRepository: art-docker-dynatrace
      imageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busyboxpipeline
      imageTag: '${run_number}'

  - name: simpleBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: dockeratrifactory
      buildName: SampleApp
      buildNumber: 1

  - name: simpleHelmChartBuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: dockeratrifactory
      buildName: SampleApp
      buildNumber: '0.1.${run_number}'

  - name: simplehelmRepoChart
    type: GitRepo
    configuration:
      gitProvider: DT_PIPELINE
      path: JFrogDynatrace/pipelines-demo # replace with your repo
      branches:
        include: main
      buildOn:
        commit: true

  - name: simplehelmChart
    type: HelmChart
    configuration:
      sourceArtifactory: dockeratrifactory
      repository: simplecharts
      chart: busybox
      version: 0.0.0

pipelines:
  - name: dynatrace_demo_helm
    configuration:
      environmentVariables:
        readOnly:
          my_releaseName: "busyboxpipeline${run_number}"
    steps:
      - name: build_image
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: dockeratrifactory
          inputResources:
            - name: helmGitHub
          dockerFileLocation: pipeline/dynatrace/
          dockerFileName: Dockerfile
          dockerImageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busyboxpipeline
          dockerImageTag: $run_number

      - name: push_image
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: dockeratrifactory
          targetRepository: art-docker-dynatrace
          inputSteps:
            - name: build_image
          outputResources:
            - name: simpleBuildInfo
            - name: dockerImage

      - name: helm_build
        type: HelmPublish
        configuration:
          helmVersion: 3
          chartPath: pipeline/dynatrace/busybox/
          affinityGroup: helm_install
          inputSteps:
            - name: push_image
          inputResources:
            - name: dockerImage
            - name: simplehelmRepoChart
              trigger: false
          outputResources:
            - name: simplehelmChart
            - name: simpleHelmChartBuildInfo
        execution:
          onStart:
            - echo "Start"
            - printenv

      # Install Dynatrace agent on the cluster. Use the separate namespace
      - name: install_oneAgent_operator
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: k8sIntegration
            - name: dynatraceIntegration
          inputSteps:
            - name: helm_build
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - ACTIVE=$(kubectl get ns dynatrace -o json --ignore-not-found | jq .status.phase -r)
            - >-
              if [[ -z "$ACTIVE" ]]; then
                echo "Dynatrace is not part of this cluster"
                exit 1
              fi
          onSuccess:
            - echo "Dynatrace OneAgent has been present in the cluster"
          onFailure:
            - echo "Dynatrace needs to be deployed in your K8s cluster"

      - name: deploy_helm
        type: HelmDeploy
        configuration:
          helmVersion: 3
          affinityGroup: helm_install
          releaseName: "busyboxjfrogpipeline"
          integrations:
            - name: dockeratrifactory
            - name: k8sIntegration
          inputResources:
            - name: simplehelmChart
            - name: dockerImage
          inputSteps:
            - name: install_oneAgent_operator
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - COUNT="$(kubectl get secret regcred | wc -l)"
            - >-
              if [[ "${COUNT}" =~ 0 ]];
              then
                echo "Creating regcred secret";
                kubectl create secret docker-registry regcred --docker-server=dynatracejtpp.jfrog.io --docker-username=${int_dockeratrifactory_user} --docker-password=${int_dockeratrifactory_apikey};
              else
                echo "Secret found, deleting and creating a new one";
                kubectl delete secret regcred;
                kubectl create secret docker-registry regcred --docker-server=dynatracejtpp.jfrog.io --docker-username=${int_dockeratrifactory_user} --docker-password=${int_dockeratrifactory_apikey};
              fi
            - kubectl config current-context
            - add_run_variables CLUSTER="$(kubectl config current-context)"
            - add_run_variables RELEASE_NAME="${my_releaseName}"
            - printenv
          onSuccess:
            - kubectl get pods
            - kubectl wait --for=condition=Available deploy/${my_releaseName} --timeout=120s
            - PODS=$(kubectl get pods --no-headers | awk '{print $1}' | grep ${my_releaseName} | tr '\n' ' ')
            - kubectl wait --for=condition=Ready pods/${PODS} --timeout=120s
          onFailure:
            - echo "Failure"

      - name: modify_properties
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: dockeratrifactory
          inputResources:
            - name: simplehelmChart
          inputSteps:
            - name: deploy_helm
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - echo "Modifying helm chart properties"
            - echo "Set current time as a deployment time"
            - TIME=$(date +%s)
            - curl --location --request PUT "${int_dockeratrifactory_url}/api/storage/simplecharts/busybox-${res_simplehelmChart_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_dockeratrifactory_apikey}"
          onSuccess:
            - echo "Check the artifact parameters"
            - curl --location --request GET "${int_dockeratrifactory_url}/api/storage/simplecharts/busybox-${res_simplehelmChart_version}.tgz?properties=helmInstallationName,chart.version,deployedOnCluster" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_dockeratrifactory_apikey}"
          onFailure:
            - echo "Failure"

      - name: Dynatrace_deployment_event
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: dockeratrifactory
            - name: dynatraceIntegration
          inputResources:
            - name: simplehelmChart
          inputSteps:
            - name: modify_properties
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - JSONOutput=$(curl --location --request GET "${int_dockeratrifactory_url}/api/storage/simplecharts/busybox-${res_simplehelmChart_version}.tgz?properties=helmInstallationName,chart.version,deployedOnCluster,vcs.url" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_dockeratrifactory_apikey}" | jq .)
            - echo $JSONOutput
            - ChartVersion=$(echo $JSONOutput | jq '.properties."chart.version"[0]')
            - HelmInstallationName=$(echo $JSONOutput | jq '.properties.helmInstallationName[0]')
            - VCS_URL=$(echo $JSONOutput | jq '.properties."vcs.url"[0]')
            - DeployedOnCluster=$(echo $JSONOutput | jq '.properties.deployedOnCluster[0]')
            - echo $ChartVersion
            - echo $HelmInstallationName
            - echo $run_number
            - echo $build_image_dockerImageName
            - echo $int_artifactoryIntegration_url
            - echo $res_simplehelmChart_version
            - echo curl -H 'Content-Type:application/json' --location --request POST "${int_dynatraceIntegration_DT_URL}/api/v1/events"  -H 'Accept:application/json' -HAuthorization:"Api-Token ${int_dynatraceIntegration_API_TOKEN}" -d "{\"eventType\":\"CUSTOM_DEPLOYMENT\",\"attachRules\":{\"tagRule\":{\"meTypes\":\"SERVICE\",\"tags\":[{\"context\":\"CONTEXTLESS\",\"key\":\"JFrog\",\"value\":\"busybox\"}]}},\"deploymentName\":\"RuntimeDeployment\",\"deploymentVersion\":\"${res_simplehelmChart_version}\",\"deploymentProject\":\"BusyBox-nginx\",\"source\":\"${int_artifactoryIntegration_url}\",\"customProperties\":{\"ChartVersion\":${ChartVersion},\"JFrogArtifactoryUrl\":\"${int_artifactoryIntegration_url}\",\"HelmInstallationName\":${HelmInstallationName},\"RunNumber\":\"${run_number}\",\"DeployedOnCluster\":${DeployedOnCluster},\"VCS_URL\":${VCS_URL},\"DockerImageName\":\"${build_image_dockerImageName}\"}}"
          onSuccess:
            - echo "Event properly sent to ${int_dynatraceIntegration_DT_URL}"
            - SERVICE_IP=$(kubectl get svc --namespace default busyboxpipeline${run_number} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            - add_run_variables SERVICE_IP="${SERVICE_IP}"
          onFailure:
            - echo "Failure"

      - name: Keptninitproject
        type: Bash
        configuration:
          affinityGroup: launchtest
          integrations:
            - name: KeptnIntegration
            - name: DT_PIPELINE
          inputSteps:
            - name: Dynatrace_deployment_event
        execution:
          onStart:
            - echo "Initializing the Keptn context ..."
          onExecute:
            - printenv
            - git clone https://${int_DT_PIPELINE_token}@github.com/JFrogDynatrace/pipelines-demo.git
            - cd pipelines-demo
            - JSONOutput=$(curl --insecure --location --request GET "${int_KeptnIntegration_API_URL}/controlPlane/v1/project/${int_KeptnIntegration_PROJECT_NAME}" --header "Accept:application/json" --header "x-token:${int_KeptnIntegration_API_TOKEN}" | jq .)
            - echo "$JSONOutput"
            - project=$(echo $JSONOutput| jq -r '.projectName')
            - echo "$project"
            - >-
              if [ "$project" = "${int_KeptnIntegration_PROJECT_NAME}" ]; then
                exit 0
              fi
            - sed -i "s/PROJECTTOREPLACE/${int_KeptnIntegration_PROJECT_NAME}/" pipeline/keptn/shipyard.yaml
            - sed -i "s/STAGETOREPLACE/${int_KeptnIntegration_KEPTN_STAGE}/" pipeline/keptn/shipyard.yaml
            - SHIPYARD=$(cat pipeline/keptn/shipyard.yaml |base64)
            - SHIPYARD=$(echo -n ${SHIPYARD})
            - SHIPYARD=${SHIPYARD//[[:blank:]]/}
            - echo ${SHIPYARD}
            - echo "{\"name\":\"${int_KeptnIntegration_PROJECT_NAME}\",\"shipyard\":\"${SHIPYARD}\"}"
            - HTTPCODE=$(curl --write-out "%{http_code}" --insecure --silent --header 'Content-Type:application/json' --location --request POST "${int_KeptnIntegration_API_URL}/controlPlane/v1/project"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" -d "{\"name\":\"${int_KeptnIntegration_PROJECT_NAME}\",\"shipyard\":\"${SHIPYARD}\"}")
            - echo "${HTTPCODE} -> url ${int_KeptnIntegration_API_URL}"
            - >-
              if [ $HTTPCODE -ge 400 ]; then
                 exit 1
              fi
            - echo "KEPTN project created successfully"
            - HTTPCODE=$(curl --write-out "%{http_code}" --insecure --silent --header 'Content-Type:application/json' --location --request POST "${int_KeptnIntegration_API_URL}/controlPlane/v1/project/${int_KeptnIntegration_PROJECT_NAME}/service"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" -d "{\"serviceName\":\"${int_KeptnIntegration_SERVICE_NAME}\" }")
            - echo "${HTTPCODE} -> url ${int_KeptnIntegration_API_URL}"
            - >-
              if [ $HTTPCODE -ge 400 ]; then
                exit 1
              fi
            - echo "KEPTN Service created successfully"
            - HTTPCODE=$(curl --write-out "%{http_code}" --insecure --silent --header "Content-Type:application/json" --location --request POST "${int_KeptnIntegration_API_URL}/v1/event"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" -d "{\"data\":{ \"project\":\"${int_KeptnIntegration_PROJECT_NAME}\", \"service:\":\"${int_KeptnIntegration_SERVICE_NAME}\", \"type\":\"{int_KeptnIntegration_Monitoring}\"},\"datacontenttype\":\"application/json\",\"source\":\"Jfrog\", \"specversion\" \"1.0\", \"type\":\"sh.keptn.event.monitoring.configure\"}")
            - >-
              if [ $HTTPCODE -ge 400 ]; then
                exit 1
              fi
            - echo "KEPTN Monitoring configured"
            - DYNATRACECONF=$(cat pipeline/keptn/dynatrace.conf.yaml |base64 )
            - DYNATRACECONF=$(echo -n ${DYNATRACECONF} )
            - DYNATRACECONF=${DYNATRACECONF//[[:blank:]]/}
            - BODY="{\"resources\":[{\"resourceURI\":\"dynatrace/dynatrace.conf.yaml\",\"resourceContent\":\"${DYNATRACECONF}\"}]}"
            - HTTPCODE=$(curl --write-out "%{http_code}" --insecure --silent --header "Content-Type:application/json" --location --request POST "${int_KeptnIntegration_API_URL}/configuration-service/v1/project/${int_KeptnIntegration_PROJECT_NAME}/resource"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" -d "${BODY}")
            - echo "${HTTPCODE} -> url ${int_KeptnIntegration_API_URL}"
            - >-
              if [  $HTTPCODE -ge 400 ]; then
                 exit 1
              fi
            - echo "Dynatrace SLI configured"

          onSuccess:
            - echo "Event properly sent to ${int_dynatraceIntegration_DT_URL}"
          onFailure:
            - echo "Failure"

      - name: KeptnMarkEvaluationStartTime
        type: Bash
        configuration:
          affinityGroup: launchtest
          inputSteps:
            - name: Keptninitproject
        execution:
          onStart:
            - echo "Marking test start in Keptn ..."
          onExecute:
            - START_TIME=$(date --utc --iso-8601=seconds)
            - add_run_variables keptnStart="${START_TIME}"
          onSuccess:
            - echo "Event properly sent to ${int_dynatraceIntegration_DT_URL}"
          onFailure:
            - echo "Failure"

      - name: Test
        type: Bash
        configuration:
          affinityGroup: launchtest
          integrations:
            - name: dynatraceIntegration
            - name: KeptnIntegration
            - name: DT_PIPELINE
          inputResources:
            - name: helmGitHub
          inputSteps:
            - name: KeptnMarkEvaluationStartTime
        execution:
          onStart:
            - echo "Marking test start in Keptn ..."
          onExecute:
            - JMETER_VERSION="5.3"
            - JMETER_HOME="/opt/apache-jmeter-${JMETER_VERSION}"
            - JMETER_BIN="${JMETER_HOME}/bin"
            - JMETER_DOWNLOAD_URL="https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz"
            - git clone https://${int_DT_PIPELINE_token}@github.com/JFrogDynatrace/pipelines-demo.git
            - cd pipelines-demo
            - add-apt-repository ppa:webupd8team/java
            - apt-get update --fix-missing
            - apt-get upgrade
            - mkdir -p /tmp/dependencies
            - apt install oracle-java8-installer
            - curl -L --silent ${JMETER_DOWNLOAD_URL} >  /tmp/dependencies/apache-jmeter-${JMETER_VERSION}.tgz
            - tar -xzf /tmp/dependencies/apache-jmeter-${JMETER_VERSION}.tgz -C /opt
            - rm -rf /tmp/dependencies
            - ${JMETER_BIN}/jmeter -n -t pipeline/jmeter/basicload_withdtmint.jmx -JDT_API_TOKEN=${int_dynatraceIntegration_API_TOKEN} -JDT_TENANT=${int_dynatraceIntegration_TENANT_ID} -JKEPTN_SERVICE=${int_KeptnIntegration_SERVICE_NAME} -JSERVER_URL=${SERVICE_IP} -JKEPTN_STAGE=${int_KeptnIntegration_KEPTN_STAGE} -JKEPTN_PROJECT=${int_KeptnIntegration_PROJECT_NAME}
          onSuccess:
            - END_TIME=$(date --utc --iso-8601=seconds)
            - add_run_variables keptnEnd="${END_TIME}"
          onFailure:
            - echo "Failure"

      - name: KeptnSendEvaluationEvent
        type: Bash
        configuration:
          affinityGroup: launchtest
          integrations:
            - name: KeptnIntegration
          inputSteps:
            - name: Test
        execution:
          onStart:
            - echo "Sending evaluation event to Keptn for ${int_KeptnIntegration_PROJECT_NAME}.${int_KeptnIntegration_KEPTN_STAGE}.${int_KeptnIntegration_SERVICE_NAME}"
          onExecute:
            - DATA="{\"data\":{\"teststrategy\":\"manual\",\"project\":\"${int_KeptnIntegration_PROJECT_NAME}\",\"stage\":\"${int_KeptnIntegration_KEPTN_STAGE}\",\"service\":\"${int_KeptnIntegration_SERVICE_NAME}\",\"monitoring\":\"${int_KeptnIntegration_Monitoring}\",\"labels\":{\"buildId\":\"${run_id}\",\"jobname\":\"${pipeline_name}\",\"buildNumber\":\"${run_number}\",\"joburl\":\"${step_url}\" }, \"status\":\"succeeded\",\"result\":\"pass\",\"test\":{\"start\":\"${keptnStart}\",\"end\":\"${keptnEnd}\" },\"evaluation\":{\"start\":\"${starttime}\",\"end\":\"${endtime}\"},\"image\":\"${pipeline_name}\",},\"datacontenttype\":\"application/json\",\"source\":\"Jfrog\",\"specversion\":\"1.0\",\"type\":\"sh.keptn.event.evaluation.triggered\"}"
            - JSONRESPONSE=$(curl --insecure --silent --header 'Content-Type:application/json' --location --request POST "${int_KeptnIntegration_API_URL}/v1/event"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" -d "${DATA}"| jq .)
            - echo ${JSONRESPONSE}
            - >-
              if [[ "$JSONRESPONSE" != *_"keptnContext"_* ]]; then
                exit 1
              fi
            - echo "KEPTN evaluation sent"
            - KEPTNCONTEXT=$(echo $JSONRESPONSE| jq -r '.keptnContext')
            - echo "KEPTN CONtext is ${KEPTNCONTEXT}"
          onSuccess:
            - echo "Event properly sent to ${int_dynatraceIntegration_DT_URL}"
            - add_run_variables keptnContext="${KEPTNCONTEXT}"
          onFailure:
            - echo "Failure"
      - name: KeptnWaithForEvaluation
        type: Bash
        configuration:
          affinityGroup: launchtest
          integrations:
            - name: KeptnIntegration
          inputSteps:
            - name: KeptnSendEvaluationEvent
        execution:
          onStart:
            - echo "Waiting for the result of the evaluation"
          onExecute:
            - >-
              STARTTS=$(date -u +%s)
              TIME=0
              while $TIME < 120
              do
                  JSONRESPONSE=$(curl  --insecure --silent --header 'Content-Type:application/json' --location --request GET "${int_KeptnIntegration_API_URL}/mongodb-datastore/event?keptnContext=${keptnContext}&type=sh.keptn.event.evaluation.finished"  -H 'Accept:application/json' --header "x-token:${int_KeptnIntegration_API_TOKEN}" | jq .)
                  echo ${JSONRESPONSE}
                  if [[ ${JSONRESPONSE} == *_"No Keptn sh.keptn.event.evaluation.finished event found for context"_* ]]
                      sleep 20
                  then
                      score = $(echo ${JSONRESPONSE} | jq -r '.events.data.evaluation.score')
                      result = $(echo ${JSONRESPONSE} | jq -r '.events.data.evaluation.result')
                      return 0
                  fi
                  TIME=$(date -u +%s) - ${STARTTS}
              done
              echo "KEPTN ${score}, result : ${result}

              if[[ $result eq "warning"]
                  echo "Unstable"
                  return 1
              then
              else
                if[[ $result eq "pass" ]]
                   echo "SUCCESS"
                   return 0
                else
                   echo "FAILURE"
                   return 1
                fi
              fi
          onSuccess:
            - echo "Event properly sent to ${int_dynatraceIntegration_DT_URL}"
            - add_run_variables score="${score}"
            - add_run_variables result="${result}"
          onFailure:
            - echo "Failure"